// Code generated by protoc-gen-go.
// source: stdlib.proto
// DO NOT EDIT!

/*
Package stdlib is a generated protocol buffer package.

It is generated from these files:
	stdlib.proto

It has these top-level messages:
	Foo
	Bar
*/
package stdlib

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Foo struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// NOTE why 1 and 2 ?
type Bar struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (m *Bar) String() string            { return proto.CompactTextString(m) }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Foo)(nil), "stdlib.Foo")
	proto.RegisterType((*Bar)(nil), "stdlib.Bar")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StdLib service

type StdLibClient interface {
	// NOTE is it possible to only pass int32 or none ?
	// normal synchronous function call
	SimpleSync(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error)
}

type stdLibClient struct {
	cc *grpc.ClientConn
}

func NewStdLibClient(cc *grpc.ClientConn) StdLibClient {
	return &stdLibClient{cc}
}

func (c *stdLibClient) SimpleSync(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := grpc.Invoke(ctx, "/stdlib.StdLib/SimpleSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StdLib service

type StdLibServer interface {
	// NOTE is it possible to only pass int32 or none ?
	// normal synchronous function call
	SimpleSync(context.Context, *Foo) (*Bar, error)
}

func RegisterStdLibServer(s *grpc.Server, srv StdLibServer) {
	s.RegisterService(&_StdLib_serviceDesc, srv)
}

func _StdLib_SimpleSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StdLibServer).SimpleSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stdlib.StdLib/SimpleSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StdLibServer).SimpleSync(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

var _StdLib_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stdlib.StdLib",
	HandlerType: (*StdLibServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleSync",
			Handler:    _StdLib_SimpleSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("stdlib.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x49, 0xc9,
	0xc9, 0x4c, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xe4, 0xb9, 0x98,
	0xdd, 0xf2, 0xf3, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x63, 0x2e, 0x66, 0xa7, 0xc4, 0x22, 0x21, 0x21,
	0x2e, 0x96, 0xe4, 0xfc, 0x14, 0x88, 0x2c, 0x6b, 0x10, 0x98, 0x8d, 0xac, 0x89, 0x09, 0x45, 0x93,
	0x91, 0x11, 0x17, 0x5b, 0x70, 0x49, 0x8a, 0x4f, 0x66, 0x92, 0x90, 0x06, 0x17, 0x57, 0x70, 0x66,
	0x6e, 0x41, 0x4e, 0x6a, 0x70, 0x65, 0x5e, 0xb2, 0x10, 0xb7, 0x1e, 0xd4, 0x11, 0x6e, 0xf9, 0xf9,
	0x52, 0x70, 0x8e, 0x53, 0x62, 0x91, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x61, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x35, 0xea, 0x10, 0xae, 0xa8, 0x00, 0x00, 0x00,
}
